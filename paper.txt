\documentclass[conference]{IEEEtran}

\usepackage{listings}
\usepackage{hyperref}
\usepackage{url}
\usepackage{cite}
\usepackage{amsmath,amssymb,amsfonts}
\usepackage{algorithmic}
\usepackage{graphicx}
\usepackage{textcomp}
\usepackage{xcolor}
\def\BibTeX{{\rm B\kern-.05em{\sc i\kern-.025em b}\kern-.08em
    T\kern-.1667em\lower.7ex\hbox{E}\kern-.125emX}}
\begin{document}

\title{CSS Methodologies for organized and scalable CSS code}

\author{\IEEEauthorblockN{Elena Ebetshuber}
\IEEEauthorblockA{\textit{Smart and Interconnected Living Department} \\
\textit{University of Applied Sciences Upper Austria}\\
Hagenberg im Mühlkreis, Austria \\
s2310455014@fhooe.at}
}

\maketitle

\begin{abstract}
This paper investigates the challenges of managing CSS code in larger software projects and advocates for the adoption of robust CSS methodologies. Three prominent methodologies are evaluated - BEM, SMACSS and Atomic CSS. 
Based on a practical demonstration in each methodology, key metrics such as Lines of Code, Maintenance, Reusability and User-friendliness will be compared. 
%The objective is to determine their effectiveness in organizing and maintaining CSS stylesheets on project-specific needs.
The objective is to determine whether there is an overall winner among the methods mentioned in the metrics examined or to determine which methodologies are better given specific project requirements and needs.
This analysis should empower developers and software architects with the insights necessary to make informed choices in optimizing their CSS workflows for the unique demands of their projects.
\end{abstract}

\begin{IEEEkeywords}
css, css methodologies, cascading style sheets, bem, smacss, atomic css, organized code, scalable code

%https://byby.dev/css-methodologies
%https://medium.com/@nargessmi87/what-are-css-methodologies-and-why-to-use-them-4ad32a86aa80
%https://www.webfx.com/blog/web-design/css-methodologies/
%https://medium.com/@uidev3594/css-methodologies-d31903bafab3

\end{IEEEkeywords}

\section{Introduction}
CSS (Cascading Style Sheets) is a language for describing the style and layout of web pages. This includes defining typography, colors, sizes, spacings, animations and among others responsiveness. 
In larger projects, managing and maintaining CSS code can become a significant challenge. Common issues include a lot of redundant code, the absence of clear naming conventions and structure, and the evolution of the CSS codebase into an unmaintainable state.
As a result, the adoption of a robust CSS methodology becomes not only prudent but essential. Such a methodology provides the much-needed scaffolding to organize and maintain CSS stylesheets effectively, particularly in the context of larger projects. \cite{medium1}
Many CSS methodologies are existing, where three of the most used ones will be evaluated further:
\begin{itemize}
\item BEM (Block Element Modifier): BEM introduces a naming convention that divides styles into Blocks, Elements, and Modifiers, promoting a clear and modular structure.
\item SMACSS (Scalable and Modular Architecture for CSS): SMACSS emphasizes categorizing styles into base, layout, module, state, and theme categories, providing a flexible and scalable architecture.
\item Atomic CSS: Atomic CSS breaks down styles into small, single-purpose utility classes, allowing for quick and flexible styling without writing custom styles for each element.
\end{itemize}

For each methodology, first of all the structure will be explained. 
Next, each methodology will be analyzed based on the following key metrics:
\begin{itemize}
\item Lines of Code (LOC)
\item Maintenance
\item Reusability
\item User-friendliness
\end{itemize}
In order to provide a valid comparison, a practical implementation in each methodology will be implemented. 
In the end, it will be evaluated if there is an overall superior methodology based on the given metrics or if certain methodologies excel in specific project requirements. 

//TODO iwo schreiben, dass man auf alle spezifischen html tags verhindert hat, um alle stylings so viel wie möglich selber machen muss also hauptsächlich divs verwendet wurden

\section{BEM}
BEM stands for Block, Element and Modifier and counts as a CSS methodology because it is designed to improve the modularity, reusability and structure of code by providing a clear and consistent naming structure
BEM was introduced by Yandex, a Russian company and has gained widespread adoption in the web development community. \cite{bem}

\subsection{Structure}
The methodology consists of Blocks, Elements and Modifiers. 

\textbf{Block}
\begin{itemize}
\item Standalone entity that is meaningful on its own. 
\item Classes like "header", "container", "menu", "checkbox"
\end{itemize}

\textbf{Element}
\begin{itemize}
\item A part of a block that has no standalone meaning and is semantically tied to its block. 
\item Classes like "list\_\_item", "checkbox\_\_caption", "header\_\_title"
\end{itemize} \par

\textbf{Modifier}
\begin{itemize}
\item A flag on a block or element. Use them to change appearance or behavior.
\item Classes like "disabled", "checked", "small", "fixed"
\end{itemize}
\cite{bem}

\subsection{HTML example code}
\label{html-bem}
\begin{lstlisting}[basicstyle=\small\ttfamily]
<div class="todo-list todo-list--light work">
<div class="todo-list todo-list--light work">
  <div class="todo-list__title">Work</div>
  <div class="todo-list-item">
    <div onclick="toggleItem(this)"
      class="todo-list-item__label 
             todo-list-item__label--light"
      id="0">bake cake
    </div>
  </div>
</div>
\end{lstlisting}

\subsection{CSS example code}
\begin{lstlisting}[basicstyle=\small\ttfamily]
.todo-list {
  padding: 1rem;
  border-radius: 0.5rem;
  display: flex;
  gap: 1rem;
  width: 18rem;
  margin: 1rem;
  flex-direction: column;

  &--light {
    background-color: #fff;
  }

  &--dark {
    background-color: #464646;
  }

  &__title {
    font-size: 1.5rem;
  }
}

.todo-list-item {
  display: flex;
  gap: 1rem;

  &__label {
    padding: 0.5rem;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    font-size: 1rem;

    &--light {
      background-color: #e6e6e6;
    }

    &--dark {
      background-color: #333;
    }

    &--checked {
      text-decoration: line-through;
    }
  }
}
\end{lstlisting}



lessons learned bem:
unklar, wann man jetzt einen block erstellt und abwann ein tag ein unterelement ist
weil meistens hat man vershcachtelte blöcke
benennung auch schwierig




\section{SMACSS}
SMACSS stands for Scalable and Modular Architecture for CSS and is a methodology for organizing and structuring CSS code in a way that promotes scalability, modularity, and maintainability in large web projects. It was developed by Jonathan Snook and emphasizes a modular approach to designing and developing stylesheets. \cite{smacss}

\subsection{Structure}
The SMACSS methodology breaks down the CSS code into five main categories, which will be represented by different stylesheets:

\textbf{Base}
\begin{itemize}
\item The base category contains basic styles applied to the raw versions of HTML elements or styles which will be used globally. 
\item Elements like "body", "p", "h1" or classes like "button", "link", "title"
\end{itemize}

\textbf{Layout}
\begin{itemize}
\item This category defines larger layout structures that form the backbone of the page, such as headers, footers, sidebars, and main content areas.
\item Classes like "header", "main-content", "sidebar"
\end{itemize} \par

\textbf{Module}
\begin{itemize}
\item The module category is the core of SMACSS, encompassing standalone, reusable UI components. Modules are self-contained and should require as little context as possible.
\item Classes like "todo-list", "todo-list-item"
\end{itemize}

\textbf{State}
\begin{itemize}
\item This category describes the state of a module or component. 
\item Classes like "is-active", "is-hidden"
\end{itemize} \par

\textbf{Theme}
\begin{itemize}
\item The "Theme" category sets the visual appearance for specific themes or variations. This is where color schemes or design adjustments for different sections of the website can be defined.
\item Classes like "theme-light", "theme-dark"
\end{itemize}
\cite{smacss}

\subsection{HTML example code}
\begin{lstlisting}[basicstyle=\small\ttfamily]
<div class="todo-list work">
  <div class="todo-list-title">Work</div>
  <div class="item">
    <div onclick="toggleItem(this)" 
    class="button label" 
    id="0">bake cake
    </div>
  </div>
</div>
\end{lstlisting}

\subsection{CSS example code}

Located in the stylesheet \textbf{styling/base/\_buttons.css}.
\begin{lstlisting}[basicstyle=\small\ttfamily]
.button {
  padding: 0.5rem;
  border: none;
  border-radius: 0.5rem;
  cursor: pointer;
  font-size: 1rem;
}
\end{lstlisting}

Located in the stylesheet \textbf{styling/modules/\_todo-list.css}.
\begin{lstlisting}[basicstyle=\small\ttfamily]
.todo-list {
  display: flex;
  padding: 1rem;
  gap: 1rem;
  width: 18rem;
  margin: 1rem;
  flex-direction: column;
}

.todo-list-title {
  font-size: 1.5rem;
}

.todo-list .item {
  display: flex;
  gap: 1rem;
}

.todo-list .item .label {
  padding: 0.5rem;
  border: none;
  border-radius: 0.5rem;
  cursor: pointer;
  font-size: 1rem;
}

.todo-list .item .label.checked {
  text-decoration: line-through;
}
\end{lstlisting}




\section{Atomic CSS}
Atomic CSS is an approach to styling web interfaces that emphasizes the creation of small, single-purpose utility classes to define styling properties. The term "atomic" is used because these classes represent individual styling rules, similar to atoms in chemistry being the smallest units. \cite{acss}

\subsection{Structure}
Each class corresponds to a specific styling rule, such as margin, padding, font size, or color.
If we look at padding for example, for each needed variation a different utility class will be created:
\begin{itemize}
    \item .p05 \{ padding: 0.5rem; \}
    \item .p1 \{ padding: 1rem; \}
    \item .p2 \{ padding: 2rem; \}

\end{itemize}

\subsection{HTML example code}
\begin{lstlisting}[basicstyle=\small\ttfamily]
<div class="bg-white p1 m1 border-r05 flex-c 
            g1 width18 work">
  <div class="fs15">Work</div>
  <div class="flex-c g1">
    <div onclick="toggleItem(this)"
      class="width-fit bg-l p05 border-r05 
             cursor-p border-none"
      id="0">bake cake
    </div>
  </div>
</div>
\end{lstlisting}

\subsection{CSS example code}
\begin{lstlisting}[basicstyle=\small\ttfamily]
.bg-white {
  background-color: #fff;
}

.p1 {
  padding: 1rem;
}

.m1 {
  margin: 1rem;
}

.border-r05 {
  border-radius: 0.5rem;
}

.flex-c {
  display: flex;
  flex-direction: column;
}

.g1 {
  gap: 1rem;
}

.width18 {
  width: 18rem;
}

.fs15 {
  font-size: 1.5rem;
}

.width-fit {
  width: fit-content;
}

.bg-l {
  background-color: #e6e6e6;
}

.p05 {
  padding: 0.5rem;
}

.cursor-p {
  cursor: pointer;
}

.border-none {
  border: none;
}
\end{lstlisting}




\section{Comparison}
To conduct an objective comparison of the three methodologies, a todo-list application was implemented using each methodology. While the visual appearance remains consistent across all three applications, variations in HTML, CSS, and JavaScript code arise due to the adoption of the different CSS methodologies. Particularly, the emphasis was on utilizing <div> tags in the HTML, and a theme toggle was introduced to extract the maximum functionality of CSS.
The application in both themes can be seen in \ref{fig1} and \ref{fig2}.
This approach ensures a thorough exploration of the capabilities inherent in each methodology.

With distinct code bases established, the analysis will focus on four key metrics:
\begin{itemize}
    \item Lines of Code (LOC): To measure the volume of code within the project.
    \item Maintenance: To assess the ease with which updates and modifications can be made.
    \item Reusability: To measure the extent to which CSS rules and classes can be effectively reused.
    \item User-friendliness: To ascertain the methodology's intuitiveness, how easy the codebase can be comprehended and adopted by different developers.
\end{itemize}
\begin{figure}
\centerline{\includegraphics[width=8cm]{light-theme.png}}
\caption{Todo-list application in light theme}
\label{fig1}
\end{figure}

\begin{figure}
\centerline{\includegraphics[width=8cm]{dark-theme.png}}
\caption{Todo-list application in dark theme}
\label{fig2}
\end{figure}



\subsection{Lines of Code}
Comparing the Lines of Code (without blank lines), three different categories will be investigated:
\begin{itemize}
    \item The Lines of Code for each methodology altogether, including the CSS files, the HTML file and the JavaScript file. 
    \item The Lines of Code of the stylesheet for the given example above of writing one todo-list item.
    \item The Lines of Code of the function for toggling between light and dark theme.
\end{itemize}

\begin{table}[]
\begin{tabular}{lllll}
                                    & BEM & SMACSS & Atomic CSS &  \\
LOC - all                           & 296 & 235    & 262        &  \\
LOC - CSS code for 1 todo-list item & 38  & 32     & 40         &  \\
LOC - function for toggling themes  & 40  & 5      & 22         & 
\end{tabular}
\caption{Comparison of LOC in each methodology}
\label{loc}
\end{table}

As illustrated in table \ref{loc}, SMACSS emerges as the overall winner in the key metric of Lines of Code (LOC), having the smallest LOC in each category. Positioned in the middle field, Atomic CSS outperforms BEM, which holds the last position in this comparison. 

\subsection{Maintenance}
To assess the adaptability and ease of making styling changes within each methodology, a practical implementation of a theme toggle was employed. This implementation aimed to highlight the methodologies' efficiency in handling modifications. 

\textbf{BEM}

To assess the maintenance aspect in BEM, the implementation of a color theme toggle revealed challenges. The hierarchical naming conventions can complicate the identification and modification of relevant classes. This overnesting may hinder adaptability and require adjustments to maintain a cohesive structure. BEM's maintenance efforts may increase, especially when handling complex theming scenarios.

\textbf{SMACSS}

SMACSS's maintenance efficiency is highlighted by its streamlined theming approach. With theming centralized in a single stylesheet, SMACSS simplifies the modification of styles across the application. This clear separation reduces the effort required to adapt to new theming requirements. However, misclassification of styles within the categorization may pose challenges, emphasizing the importance of accurate categorization for effective maintenance. Overall, SMACSS offers a balance between simplicity and centralized theming, enhancing maintenance capabilities.

\textbf{Atomic CSS}

Maintenance in Atomic CSS is influenced by its single-purpose utility classes. While these classes enhance reusability, maintenance may become challenging in complex scenarios. The lack of clear class-to-style correlation can make it difficult to identify and modify styles. Additionally, in intricate structures, the reliance on numerous atomic classes for a single element may lead to difficulties in tracking and managing styles. Maintenance in Atomic CSS demands careful consideration of class implications and the potential creation of larger utility classes for manageability.



\subsection{Reusability}
In evaluating the reusability aspects of CSS methodologies, we delve into how each methodology facilitates the creation of modular and adaptable styles. 

\textbf{BEM}

By structuring code into Blocks, Elements, and Modifiers, BEM promotes modularity facilitating the reuse of predefined styles for specific components. Furthermore, he methodology's naming conventions enhance readability, aiding in the identification and reuse of styles.

However, the potential for excessive nesting may impede reusability, as deeply nested structures can restrict the adaptability of styles in diverse contexts. Considering  the code snippet in \ref{html-bem}, which shows a potential conflict. We have the classes for the \emph{todo-list}, for the \emph{todo-list-item} and for \emph{todo-list-item-label}. Because the todo-list-item is the block for the todo-list-item-label, it is written like \emph{todo-list-item\_\_label}. On the other hand, todo-list-item is an element of todo-list and could also be written like \emph{todo-list\_\_item}.
To address the challenge of overnesting and ensure a more harmonious structure, adjustments to the BEM methodology become imperative.

\textbf{SMACSS}

By categorizing styles into different categories, SMACSS is fostering a separation that aids in reusability.
Moreover, the use of thematic classes allows for consistent styling and reusability of styles across different components.

Nevertheless, because reusability relies on effective categorization, incorrect classification may affect the ease of reuse.

\textbf{Atomic CSS}

Thanks to the creation of small, single-purpose utility classes, Atomic CSS enhances reusability across different elements. This approach allows quick and flexible styling without the need to write custom styles for each element.

A small disadvantage might be that the limited granularity  may lead to less fine-tuned control over individual components.


\subsection{User-friendliness}
User-friendliness in the context of CSS methodologies involves how intuitively developers can work with and understand the chosen approach. Let's evaluate the user-friendliness of each methodology:

\textbf{BEM}

The user-friendliness of BEM can vary. While its naming conventions provide clarity, beginners might find it challenging to decide when to create a new block or use an existing element. The longer class names might also impact readability.  

\textbf{SMACSS}

Through aiming for simplicity, making it relatively user-friendly. The categorization into Base, Layout, Module, State, and Theme provides a clear structure. However, developers might need some time to adapt to this categorization approach.

\textbf{Atomic CSS}

Atomic CSS is known for its straightforward and minimalist approach, making it easy to apply styles by combining small, single-purpose classes. However, it may not be considered user-friendly in certain contexts. The challenge lies in the fact that the individual classes might not clearly convey the styles they imply, making it less intuitive for developers to understand the visual outcome.
In more complex structures, the use of numerous atomic classes for a single element can become overwhelming and counterproductive. This may lead to the creation of larger utility classes, somewhat resembling traditional styles, to maintain manageability.


\section{Conclusion}
In a comprehensive analysis encompassing four key metrics—Lines of Code, Maintenance, Reusability, and User-friendliness—each CSS methodology, namely BEM, SMACSS, and Atomic CSS, reveals distinct characteristics and performance.

The quantification of Lines of Code across various categories positions SMACSS as the frontrunner, boasting the smallest LOC in each aspect. This is a testament to SMACSS's efficiency in minimizing code volume while maintaining functionality. 

Delving into the realm of maintenance, the theme toggle implementation unveils nuanced challenges within each methodology. BEM introduces complexity through its hierarchical naming conventions, potentially hindering adaptability, and necessitating adjustments for cohesive structures. SMACSS demonstrates efficiency by centralizing theming, simplifying modifications, yet the accuracy of categorization remains pivotal. Atomic CSS, driven by single-purpose utility classes, presents challenges in maintaining clarity and managing styles in complex scenarios.

Considering reusability, BEM's structural approach, with Blocks, Elements, and Modifiers, facilitates modularity and style reuse. However, the potential for overnesting poses challenges in diverse contexts. SMACSS, by categorizing styles, fosters separation, enhancing reusability across components. 
Atomic CSS stands out as the epitome of reusability, as it does not stick to individual components. Instead, it uses small, versatile classes that can be effortlessly applied across various elements without stringent ties to specific components.

User-friendliness, a critical aspect in development workflows, is examined across BEM, SMACSS, and Atomic CSS. BEM, with its naming conventions, provides clarity but may pose challenges for beginners in deciding when to create new blocks or use existing elements. SMACSS, aiming for simplicity, offers a user-friendly structure, though adapting to its categorization approach may require an adjustment period. Atomic CSS, known for its minimalism, presents a straightforward but potentially less intuitive approach, especially in complex structures.

In the grand scheme of things, SMACSS emerges as the overall winner. Its prowess in minimizing code, efficient maintenance, enhanced reusability, and user-friendly structure position it as a robust choice for CSS architecture. While BEM and Atomic CSS bring unique advantages, they exhibit comparatively weaker performances in this comprehensive evaluation. SMACSS, with its balanced approach, shines as the methodology that excels across the board, meeting the demands of diverse development scenarios.




\begin{thebibliography}{99}
\bibitem{bem} Yandex (2018). \textit{BEM}. Available at: \url{https://getbem.com/} (Accessed: December 14, 2023).
\bibitem{smacss} J. Snook (2011). \textit{Scalable and Modular Architecture for CSS}. Available at: \url{https://smacss.com} Acessed: December 30, 2023).
\bibitem{acss} (2015). \textit{Atomic CSS}. Available at: \url{https://acss.com} Acessed: December 30, 2023).
\bibitem{medium1}
Pavan (2018). \textit{CSS Methodologies}. Available at: \url{https://medium.com/@uidev3594/css-methodologies-d31903bafab3} (Accessed: December 14, 2023).
\bibitem{medium2}
N. Mirzaaghaei (2018). \textit{What Are CSS Methodologies and Why to Use Them}. Available at: \url{https://medium.com/@nargessmi87/what-are-css-methodologies-and-why-to-use-them-4ad32a86aa80} (Accessed: December 14, 2023).
\bibitem{bybydev}
Byby.dev (2021). \textit{CSS Methodologies}. Available at: \url{https://byby.dev/css-methodologies} (Accessed: December 14, 2023).
\bibitem{webfx}
W. Craig. \textit{CSS Methodologies}. Available at: \url{https://www.webfx.com/blog/web-design/css-methodologies/} (Accessed: December 14, 2023).




\end{thebibliography}

\end{document}
